import { purry } from './purry';
import { isObject, isArray } from './guards';
export function pathOr() {
    return purry(_pathOr, arguments);
}
function _pathOr(object, path, defaultValue) {
    var current = object;
    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
        var prop = path_1[_i];
        if (current == null || current[prop] == null) {
            return defaultValue;
        }
        current = current[prop];
    }
    return current;
}
export function path() {
    return purry(_path, arguments);
}
function _path(obj, path) {
    var recursion = function (path, _ro) {
        if (path.length === 0)
            return _ro;
        if (!isObject(_ro) && !isArray(_ro))
            return;
        var rest = path.slice(1);
        var firstSegment = path[0];
        if (firstSegment in _ro) {
            return recursion(rest, _ro[firstSegment]);
        }
        return;
    };
    return recursion(path, obj);
}
