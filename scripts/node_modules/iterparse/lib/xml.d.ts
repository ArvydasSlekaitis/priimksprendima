/// <reference types="node" />
import { Output, Source, AnyIterable } from "./base";
import { OperatorAsyncFunction } from "ix/interfaces";
/**
 * Parse XML source to iterator
 * @param param0
 */
export declare function _xmlIterParser<T>({ pattern, source }: {
    pattern: string;
    source: NodeJS.ReadableStream;
}): AsyncGenerator<T, void, unknown>;
export declare type XMLAttributes = Record<string, string>;
export declare type XMLMarkup = Object | string;
export declare type XMLObject = {
    $name: string;
    $attrs?: XMLAttributes;
    $text?: string;
    $markup?: ReadonlyArray<XMLMarkup>;
    [d: string]: string | XMLMarkup | XMLAttributes | ReadonlyArray<XMLMarkup> | undefined | Object;
};
export declare function toXmlNode<T>(nodeFn: (data: T) => XMLObject): (data: T) => XMLObject;
export declare function xmlWrite(out: Output): OperatorAsyncFunction<XMLObject, XMLObject>;
export declare function xmlWrite(data: AnyIterable<XMLObject>, out: Output): AsyncIterable<XMLObject>;
export interface XMLReadOptions {
    pattern: string;
}
export declare function xmlRead<T extends XMLObject>(source: Source, options: XMLReadOptions): AsyncIterable<T>;
//# sourceMappingURL=xml.d.ts.map