"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bufferWrite = exports.bufferRead = void 0;
const tslib_1 = require("tslib");
const ix_1 = require("ix");
const base_1 = require("./base");
const helpers_1 = require("./_internal/helpers");
const events_1 = require("events");
function _bufferIterParser(source) {
    return tslib_1.__asyncGenerator(this, arguments, function* _bufferIterParser_1() {
        let data = [];
        let done = false;
        source.on('close', () => {
            done = true;
        });
        source.on('data', (value) => {
            data.push(value);
        });
        source.on('end', () => {
            done = true;
        });
        source.on('error', (err) => {
            throw err;
        });
        while (!done || data.length > 0) {
            const d = data.shift();
            if (!d) {
                yield tslib_1.__await(helpers_1.delay(0));
                source.resume();
                continue;
            }
            yield yield tslib_1.__await(d);
        }
    });
}
function bufferRead(source) {
    return ix_1.AsyncIterable.from(_bufferIterParser(base_1.sourceToReadStream(source)));
}
exports.bufferRead = bufferRead;
function _bufferIterWriter(output, stream) {
    return tslib_1.__asyncGenerator(this, arguments, function* _bufferIterWriter_1() {
        var e_1, _a;
        let dest = null;
        let loaded = false;
        try {
            for (var stream_1 = tslib_1.__asyncValues(stream), stream_1_1; stream_1_1 = yield tslib_1.__await(stream_1.next()), !stream_1_1.done;) {
                const data = stream_1_1.value;
                if (!loaded) {
                    dest = yield tslib_1.__await(output());
                    loaded = true;
                }
                dest === null || dest === void 0 ? void 0 : dest.write(data);
                yield yield tslib_1.__await(data);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (stream_1_1 && !stream_1_1.done && (_a = stream_1.return)) yield tslib_1.__await(_a.call(stream_1));
            }
            finally { if (e_1) throw e_1.error; }
        }
        dest === null || dest === void 0 ? void 0 : dest.end();
    });
}
function bufferWrite(data, out) {
    if (arguments.length === 1) {
        if (!(typeof data === 'string' || data instanceof events_1.EventEmitter)) {
            throw new Error("Impossible combination");
        }
        return (d) => {
            return ix_1.AsyncIterable.from(_bufferIterWriter(base_1.outputToWriteStream(data), d));
        };
    }
    if (typeof data === 'string' || data instanceof events_1.EventEmitter) {
        throw new Error("Impossible combination");
    }
    if (!out) {
        throw new Error("Expected to receive output parameter but got undefined");
    }
    return ix_1.AsyncIterable.from(_bufferIterWriter(base_1.outputToWriteStream(out), data));
}
exports.bufferWrite = bufferWrite;
